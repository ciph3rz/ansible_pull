---
- name: allow apt to use a repository over https
  apt:
    pkg:
      - apt-transport-https
      - ca-certificates
      - curl
      - gnupg2
      - software-properties-common
    state: present
    update_cache: yes
  when: ansible_pkg_mgr == 'apt'

- name: fetching docker gpg key for apt (Ubuntu/Pop_OS!)
  apt_key:
    url: "https://download.docker.com/linux/ubuntu/gpg"
    state: present
#  when: ansible_pkg_mgr == 'apt'
  when: ansible_distribution in ["Ubuntu", "Pop!_OS"]

- name: Adding docker apt sources list for AMD64 (Ubuntu/Pop_OS!)
  apt_repository:
   # repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu focal stable
    repo: "deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable"
    state: present
    filename: docker
    update_cache: yes
  # when: ansible_distribution in ["Ubuntu", "Pop!_OS"]
  when: ansible_distribution in ["Ubuntu", "Pop!_OS"] #and ansible_architecture == "amd64")
  #when: ansible_distribution == 'Ubuntu'

- name: Adding docker apt sources list for ARM64 (Ubuntu)
  apt_repository:
    #repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu focal stable
    repo: "deb [arch=arm64] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable"
    state: present
    filename: docker
    update_cache: yes
  when: (ansible_distribution == "Ubuntu" and ansible_architecture == "arm64")
  #when: ansible_distribution == 'Ubuntu'


- name: fetching docker gpg key for apt (Debian)
  apt_key:
    url: "https://download.docker.com/linux/debian/gpg"
    state: present
#  when: ansible_pkg_mgr == 'apt'
  when: ansible_distribution == 'Debian'

- name: Adding docker apt sources list (Debian)
  apt_repository:
    repo: "deb [arch=amd64] https://download.docker.com/linux/debian {{ ansible_distribution_release }} stable"
    state: present
    filename: docker
    update_cache: yes
  when: ansible_distribution == 'Debian'


- name: Installing docker packages with apt
  apt:
    name:
      - docker-ce
      - docker-ce-cli
      - containerd.io
      - docker-compose
      # - python3-pip
    state: present
  when: ansible_pkg_mgr == 'apt'

    # - name: installing docker-compose with pip3"
# - name: install docker compose (if configured).
#   get_url:
#     url: "https://github.com/docker/compose/releases/download/1.26.0/docker-compose-linux-x86_64"
#     dest: "/usr/local/bin/docker-compose"
#     mode: 0755

  # echo "pip3 install docker-compose"
  # sudo pip3 install docker-compose


- name: install dnf plugin support
  dnf:
    update_cache: yes
    name: dnf-plugins-core
  when: ansible_pkg_mgr == 'dnf'

- name: add docker repo to dnf
  command:
    dnf config-manager --add-repo https://download.docker.com/linux/fedora/docker-ce.repo
  args:
    warn: false
  when: ansible_pkg_mgr == 'dnf'

# - name: change fedora release version
#   command:
#     # temporary workaround when os is too new
#     sed -i 's/\$releasever/36/g' /etc/yum.repos.d/docker-ce.repo
#   args:
#     warn: false
#   when: ansible_pkg_mgr == 'dnf'

- name: installing with dnf
  dnf:
    update_cache: yes
    name:
      - docker-ce
      - docker-ce-cli
      - containerd.io
      - docker-compose
  when: ansible_pkg_mgr == 'dnf'

# - name: enable backward compatibility for cgroups on fedora 31+
#   command:
#     grubby --update-kernel=all --args="systemd.unified_cgroup_hierarchy=0"
#   when:
#     - ansible_pkg_mgr == 'dnf'
#     - ansible_distribution_version >= '31'

- name: add {{ansible_user_id}} to docker group
  user:
    name: "{{ansible_user_id}}"
    groups: docker
    append: yes

- name: add docker to firewalld trusted zone
  firewalld:
    zone: trusted
    interface: docker0
    permanent: yes
    immediate: yes
    state: enabled
  # shell: |
  #   firewall-cmd --permanent --zone=trusted --change-interface=docker0
  #   firewall-cmd --reload
  #   systemctl restart firewalld
  #   systemctl restart docker
  when: ansible_distribution == 'fedora' or ansible_distribution == 'centos' or ansible_distribution == 'red hat enterprise linux'

- name: start and enable docker service
  systemd:
    enabled: true
    state: started
    name: docker
